Código fonte do curso:
https://cursos.alura.com.br/forum/topico-codigo-exemplo-aplicacao-106886
https://s3.amazonaws.com/caelum-online-public/646-docker/03/projetos/volume-exemplo.zip
https://s3.amazonaws.com/caelum-online-public/646-docker/05/projetos/alura-docker-cap05.zip
https://s3.amazonaws.com/caelum-online-public/646-docker/06/projetos/alura-docker-cap06.zip

Play With Docker (A simple, interactive and fun playground to learn Docker)
https://labs.play-with-docker.com/
Mesmo usuário e senha do DockerHub

Instalar Docker no Ubuntu
-------------------------
1-Antes de mais nada, remova possíveis versões antigas do Docker:
sudo apt-get remove docker docker-engine docker.io

2-Depois, atualize o banco de dados de pacotes:
sudo apt-get update

3-Agora, adicione ao sistema a chave GPG oficial do repositório do Docker:
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

4-Adicione o repositório do Docker às fontes do APT:
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

5-Atualize o banco de dados de pacotes, pare ter acesso aos pacotes do Docker a partir do novo repositório adicionado:
sudo apt-get update

6-Por fim, instale o pacote docker-ce:
sudo apt-get install docker-ce

7-Caso você queira, você pode verificar se o Docker foi instalado corretamente verificando a sua versão:
sudo docker version

E para executar o Docker sem precisar de sudo, adicione o seu usuário ao grupo docker:
sudo usermod -aG docker $(whoami)
-------------------------

Instalando o Docker Compose no Linux
-------------------------
O Docker Compose não é instalado por padrão no Linux, então você deve instalá-lo por fora. 
Para tal, baixe-o na sua versão mais atual, que pode ser visualizada no seu GitHub(https://github.com/docker/compose/releases), executando o comando abaixo:

sudo curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

Após isso, dê permissão de execução para o docker-compose:

sudo chmod +x /usr/local/bin/docker-compose

Pronto, o Docker Compose já está instalado no seu Linux!
-------------------------

Criando um Dockerfile
-------------------------
docker build -f Dockerfile -t brunosantanati/node .
docker run -d -p 8080:3000 brunosantanati/node
Acessar: http://localhost:8080/
-------------------------

Enviar para o DockerHub
-------------------------
docker login
docker push brunosantanati/node
docker pull brunosantanati/node
Link do DockerHub: https://hub.docker.com/
-------------------------

Comandos usados no curso (a maioria são comandos do Docker)
-------------------------
docker run --help
docker version
docker run hello-world
docker run ubuntu
docker run ubuntu echo "Olá Mundo"
docker run -it ubuntu
docker ps
docker ps -a
docker stop 11a67ef65cbb
docker start 11a67ef65cbb
docker start --help
docker start -a -i 72c
docker rm 72c
docker container prune
docker images
docker rmi hello-world
docker run dockersamples/static-site
docker run -d dockersamples/static-site
docker run -d -P dockersamples/static-site
docker stop -t 0 fa35
docker port eae9
Se estiver usando o Docker Toolbox pode usar: docker-machine ip
docker run -d -P --name meu-site dockersamples/static-site
docker stop meu-site
docker run -d -p 12345:80 dockersamples/static-site
docker run -d -P -e AUTHOR="Bruno" dockersamples/static-site
docker ps -q
docker stop -t 0 $(docker ps -q)
docker run -v "/var/www" ubuntu
docker inspect eff6
docker run -it -v "C:\User\myuser\Desktop:/var/www" ubuntu
docker run -it -v "/root/myfolder:/var/www" ubuntu
touch novo-arquivo.txt
echo "texto" > novo-arquivo.txt
docker run -d -p 8080:3000 -v "/root/myfolder:/var/www" -w "/var/www" node npm start
docker run -d -p 8080:3000 -v "$(pwd):/var/www" -w "/var/www" node npm start
docker build -f Dockerfile -t brunosantanati/node .
docker rm -f b7
docker run -d -p 8080:3000 brunosantanati/node
docker login
docker push brunosantanati/node
docker pull brunosantanati/node
Dentro do container Ubuntu para pegar o ip: hostname -i
Instalar o ping dentro do container Ubuntu: apt-get update && apt-get install -y iputils-ping
Dentro de um container, pingar o outro: ping 172.17.0.2
docker network create --driver bridge minha-rede
docker network ls
docker run -it --name meu-container-de-ubuntu --network minha-rede ubuntu
docker rm -f meu-ubuntu
docker inspect meu-container-de-ubuntu
docker run --name segundo-ubuntu -it --network minha-rede ubuntu
Posso pingar pelo nome outro container que está na mesma rede(e a rede tem que ter sido criada por mim): ping meu-container-de-ubuntu
docker pull douglasq/alura-books:cap05
docker run -d -p 8080:3000 douglasq/alura-books:cap05
docker rm -f meu-mongo
docker run -d --name meu-mongo --network minha-rede mongo
docker inspect meu-mongo
docker run --network minha-rede -d -p 8080:3000 douglasq/alura-books:cap05
docker network inspect minha-rede
docker stop meu-mongo
docker run -d -p 3000:3000 --name alura-books --network minha-rede douglasq/alura-books:cap05
docker-compose build
docker-compose up
docker-compose up -d
docker-compose ps
docker-compose down
Pingar pelo nome do container: docker exec -it alura-books-1 ping alura-books-2
Pingar pelo nome do serviço(criado no docker-compose.yml): docker exec -it alura-books-1 ping node2
-------------------------

Explicações dos comandos fornecidas pelo curso
-------------------------
docker version - exibe a versão do docker.
docker run NOME_DA_IMAGEM - cria um container com a respectiva imagem passada como parâmetro.
-------------------------
docker ps - exibe todos os containers em execução no momento.
docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
docker start ID_CONTAINER - inicia o container com id em questão.
docker stop ID_CONTAINER - interrompe o container com id em questão.
docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
docker rm ID_CONTAINER - remove o container com id em questão.
docker container prune - remove todos os containers que estão parados.
docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container.
docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
docker run -d -P -e AUTHOR="Fulano" dockersamples/static-site - define uma variável de ambiente AUTHOR com o valor Fulano no container criado.
-------------------------
docker run -v "[CAMINHO_VOLUME_LOCAL:]CAMINHO_VOLUME_CONTAINER" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container, caso seja especificado um caminho local monta o volume local no volume do container.
docker inspect ID_CONTAINER - retorna diversas informações sobre o container.
-------------------------
docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
docker build -f CAMINHO_DOCKERFILE/Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.
docker login - inicia o processo de login no Docker Hub.
docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.
-------------------------
No último video usei o comando docker pull douglasq/alura-books:cap05 sem ter explicado antes. Fique tranquilo pois esse comando faz nada mais do que baixar, sem rodar, a imagem desejada do Docker Hub :)
Por exemplo, para baixar a imagem ubuntu do Docker Hub você pode usar:
docker pull ubuntu

Para baixar uma imagem de um usuário especifico vimos a sintaxe:
docker pull NOME_USUARIO/NOME_IMAGEM

Além disso, uma imagem pode ter um tag que serve para pegar uma determinada versão dessa imagem. Alias, você já viu a tag :latest e no video eu usei a tag :cap05, por exemplo:
docker pull douglasq/alura-books:cap05
Isso baixará a versão (ou tag) cap05 da imagem alura-books do usuário douglasq.
-------------------------
hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.
docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.
-------------------------
Segue a lista com os principais comandos utilizados durante o curso:

Comandos relacionados às informações
docker version - exibe a versão do docker que está instalada.
docker inspect ID_CONTAINER - retorna diversas informações sobre o container.
docker ps - exibe todos os containers em execução no momento.
docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
Comandos relacionados à execução
docker run NOME_DA_IMAGEM - cria um container com a respectiva imagem passada como parâmetro.
docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container e define uma porta aleatória.
docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
docker run -v "CAMINHO_VOLUME" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container.
docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.
Comandos relacionados à inicialização/interrupção
docker start ID_CONTAINER - inicia o container com id em questão.
docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
docker stop ID_CONTAINER - interrompe o container com id em questão.
Comandos relacionados à remoção
docker rm ID_CONTAINER - remove o container com id em questão.
docker container prune - remove todos os containers que estão parados.
docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
Comandos relacionados à construção de Dockerfile
docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial.
docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM CAMINHO_DOCKERFILE - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.
Comandos relacionados ao Docker Hub
docker login - inicia o processo de login no Docker Hub.
docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.
Comandos relacionados à rede

hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.
Comandos relacionados ao docker-compose

docker-compose build - Realiza o build dos serviços relacionados ao arquivo docker-compose.yml, assim como verifica a sua sintaxe.
docker-compose up - Sobe todos os containers relacionados ao docker-compose, desde que o build já tenha sido executado.
docker-compose down - Para todos os serviços em execução que estejam relacionados ao arquivo docker-compose.yml.
-------------------------
docker-compose up - sobe os serviços criados
docker-compose down - para os serviços criados.
docker-compose ps - lista os serviços que estão rodando.
docker exec -it alura-books-1 ping node2- executa o comando ping node2 dentro do container alura-books-1
-------------------------